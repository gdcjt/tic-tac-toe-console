#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#define ROWS 3
#define COLS 3
void init_board(char board[ROWS][COLS]);
void print_board(char board[ROWS][COLS]);
void play_game(char board[ROWS][COLS]);
bool check_win(char board[ROWS][COLS]);
void player_move(char board[ROWS][COLS], int location);
void com_move(char board[ROWS][COLS], int location);

void menu()
{
	printf("*************************\n");
	printf("*****    1.play    ******\n");
	printf("*****    0.exit    ******\n");
	printf("*************************\n");

}

int main()
{
	int input = 1;                                         //input变量存储菜单选项，为1时进行游戏，为0时退出游戏
	char board[ROWS][COLS] = { 0 };
	init_board(board);
	srand((unsigned)time(NULL));
	while (input)
	{
		menu();
		printf("请选择:");
		scanf_s("%d", &input);                            //输入菜单选项
		if (input == 1) {
			init_board(board);                            //初始化棋盘函数，将棋盘清空
			print_board(board);                           //绘制棋盘
			play_game(board);
		}
	}
	return 0;
}

void play_game(char board[ROWS][COLS])
{
	int count = 0;                                        //棋盘中棋的数量
	int loc = 0;                                          //棋的位置编号
	while (1) {
		player_move(board, loc);                          //玩家先手
		count++;
		print_board(board);
		if (check_win(board)) {
			printf("你获胜了！！！！！\n");
			break;
		}
		else if (count >= 9) {                            //棋盘满了，判断为平局
			printf("平局！！！！\n");
			break;
		}
		
		printf("电脑走：\n");
		com_move(board, loc);                             //电脑后手
		count++;
		print_board(board);
		if (check_win(board)) {
			printf("电脑胜！！！\n");
			break;
		}
		else if (count >= 9) {                            //棋盘满了，判断为平局
			printf("平局！！！！\n");
			break;
		}
	}
}

void com_move(char board[ROWS][COLS], int location)       //电脑在随机位置下棋
{

	while (1)
	{
		location = rand() % 9;
		if (board[location / 3][location % 3] == ' ') {
			board[location / 3][location % 3] = 'O';
			return;
		}
	}
}

void player_move(char board[ROWS][COLS], int location)   //玩家根据输入的位置编号下棋
{
	while (1)
	{
		printf("请输入编号（按从左到右的顺序）：");
		scanf_s("%d", &location);
		if (board[(location - 1) / 3][(location - 1) % 3] == ' ') {
			board[(location - 1) / 3][(location - 1) % 3] = 'X';
			return;
		}
		else {
			printf("输入错误");
		}
	}
}

bool check_win(char board[ROWS][COLS])                    //若有任一行或列或斜线的棋子相同，则返回真
{
	int i = 0;
	for (i = 0;i < 3;i++) {
		if ((board[i][0] == board[i][1]) && (board[i][1] == board[i][2]) && (board[i][1] != ' ')) return true;
	}
	for (i = 0;i < 3;i++) {
		if ((board[0][i] == board[1][i]) && (board[1][i] == board[2][i]) && (board[1][i] != ' ')) return true;
	}
	if ((board[0][0] == board[1][1]) && (board[1][1] == board[2][2]) && (board[1][1] != ' ')) return true;
	else if ((board[0][2] == board[1][1]) && (board[1][1] == board[2][0]) && (board[1][1] != ' ')) return true;
	else return false;
}

void init_board(char board[ROWS][COLS])                  //将棋盘清空
{
	int i = 0;
	int j = 0;
	for (i = 0;i < ROWS;i++) {
		for (j = 0;j < COLS;j++) {
			board[i][j] = ' ';
		}
	}
}

void print_board(char board[ROWS][COLS])                //绘制棋盘
{
	int i = 0;
	for (i = 0;i < ROWS;i++) {
		printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
		printf("---|---|---\n");
	}
}
